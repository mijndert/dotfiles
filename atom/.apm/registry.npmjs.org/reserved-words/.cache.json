{"_id":"reserved-words","_rev":"3-48771081a75dafb7d331377473f53af9","name":"reserved-words","description":"ECMAScript reserved words checker","dist-tags":{"latest":"0.1.1"},"versions":{"0.1.1":{"name":"reserved-words","version":"0.1.1","description":"ECMAScript reserved words checker","main":"lib/index.js","scripts":{"test":"jshint && jscs lib test && mocha"},"repository":{"type":"git","url":"git+https://github.com/zxqfox/reserved-words.git"},"keywords":["ES3","ES5","ES6","ReservedWord","Keyword","checker"],"author":{"name":"Alexej Yaroshevich","email":"zxqfox@gmail.com","url":"http://github.com/zxqfox"},"license":"MIT","bugs":{"url":"https://github.com/zxqfox/reserved-words/issues"},"homepage":"https://github.com/zxqfox/reserved-words#readme","devDependencies":{"jscs":"^1.13.1","jscs-jsdoc":"^1.1.0","jshint":"^2.8.0","mocha":"^2.2.5"},"files":["lib","README.md","LICENSE"],"gitHead":"0f719a971be6cfbe582d3d11a86726470904d5e1","_id":"reserved-words@0.1.1","_shasum":"6f7c15e5e5614c50da961630da46addc87c0cef2","_from":".","_npmVersion":"2.9.0","_nodeVersion":"2.0.1","_npmUser":{"name":"qfox","email":"zxqfox@gmail.com"},"dist":{"shasum":"6f7c15e5e5614c50da961630da46addc87c0cef2","tarball":"https://registry.npmjs.org/reserved-words/-/reserved-words-0.1.1.tgz"},"maintainers":[{"name":"qfox","email":"zxqfox@gmail.com"}],"directories":{}}},"readme":"# reserved-words\n\n[![Build Status](https://secure.travis-ci.org/zxqfox/reserved-words.svg)](http://travis-ci.org/zxqfox/reserved-words)\n\n## What is it?\n\nTiny package for detecting reserved words.\n\n`Reserved Word` is either a `Keyword`, or a `Future Reserved Word`, or a `Null Literal`, or a `Boolean Literal`.\nSee: [ES5 #7.6.1](http://es5.github.io/#x7.6.1) and\n[ES6 #11.6.2](http://www.ecma-international.org/ecma-262/6.0/#sec-reserved-words).\n\n## Installation\n\n```\nnpm install reserved-words\n```\n\n## API\n\n### check(word, [dialect], [strict])\n\nReturns `true` if provided identifier string is a Reserved Word\nin some ECMAScript dialect (ECMA-262 edition).\n\nIf the `strict` flag is truthy, this function additionally checks whether\n`word` is a Keyword or Future Reserved Word under strict mode.\n\n#### Example\n\n```\nvar reserved = require('reserved-words');\nreserved.check('volatile', 'es3'); // true\nreserved.check('volatile', 'es2015'); // false\nreserved.check('yield', 3); // false\nreserved.check('yield', 6); // true\n```\n\n### dialects\n\n#### es3 (or 3)\n\nRepresents [ECMA-262 3rd edition](http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf).\n\nSee section 7.5.1.\n\n#### es5 (or 5)\n\nRepresents [ECMA-262 5th edition (ECMAScript 5.1)](http://es5.github.io/).\n\nReserved Words are formally defined in ECMA262 sections\n[7.6.1.1](http://es5.github.io/#x7.6.1.1) and [7.6.1.2](http://es5.github.io/#x7.6.1.2).\n\n#### es2015 (or es6, 6)\n\nRepresents [ECMA-262 6th edition](ECMAScript 2015).\n\nReserved Words are formally defined in sections\n[11.6.2.1](http://ecma-international.org/ecma-262/6.0/#sec-keywords) and\n[11.6.2.2](http://ecma-international.org/ecma-262/6.0/#sec-future-reserved-words).\n\n### License\n\nLicensed under [The MIT License](https://github.com/zxqfox/reserved-words/blob/LICENSE)\n","maintainers":[{"name":"qfox","email":"zxqfox@gmail.com"}],"time":{"modified":"2015-07-20T10:51:42.468Z","created":"2015-07-20T10:39:40.238Z","0.1.0":"2015-07-20T10:39:40.238Z","0.1.1":"2015-07-20T10:51:23.955Z"},"homepage":"https://github.com/zxqfox/reserved-words#readme","keywords":["ES3","ES5","ES6","ReservedWord","Keyword","checker"],"repository":{"type":"git","url":"git+https://github.com/zxqfox/reserved-words.git"},"author":{"name":"Alexej Yaroshevich","email":"zxqfox@gmail.com","url":"http://github.com/zxqfox"},"bugs":{"url":"https://github.com/zxqfox/reserved-words/issues"},"license":"MIT","readmeFilename":"README.md","_attachments":{},"_etag":"W/\"55acd2be-f59\"","_lastModified":"Mon, 20 Jul 2015 10:51:42 GMT"}