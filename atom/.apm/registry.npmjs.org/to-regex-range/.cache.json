{"_id":"to-regex-range","_rev":"14-73874821c9078b3f38b36b1cf75075a2","name":"to-regex-range","description":"Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.78 million test assertions.","dist-tags":{"latest":"2.1.1"},"versions":{"0.1.0":{"name":"to-regex-range","description":"Returns a regex-compatible range from two numbers, min and max. Useful for creating regular expressions to validate numbers, ranges, years, etc.","version":"0.1.0","homepage":"https://github.com/jonschlinkert/to-regex-range","author":{"name":"Jon Schlinkert","url":"https://github.com/jonschlinkert"},"repository":{"type":"git","url":"git+https://github.com/jonschlinkert/to-regex-range.git"},"bugs":{"url":"https://github.com/jonschlinkert/to-regex-range/issues"},"license":"MIT","files":["index.js"],"main":"index.js","engines":{"node":">=0.10.0"},"scripts":{"test":"mocha"},"dependencies":{"is-number":"^2.0.2","repeat-string":"^1.5.2"},"devDependencies":{"mocha":"*","should":"*"},"keywords":["alpha","alphabetical","bash","brace","expand","expansion","glob","match","matches","matching","number","numerical","range","ranges","sh"],"verb":{"related":{"list":["fill-range","expand-range","micromatch","repeat-element","repeat-string"]}},"gitHead":"e9033fa99268989821413d7301b70c2f62da9b99","_id":"to-regex-range@0.1.0","_shasum":"1332e39727b43e2767c6ec26c7df880db3db11aa","_from":".","_npmVersion":"2.10.1","_nodeVersion":"0.12.4","_npmUser":{"name":"jonschlinkert","email":"github@sellside.com"},"maintainers":[{"name":"jonschlinkert","email":"github@sellside.com"}],"dist":{"shasum":"1332e39727b43e2767c6ec26c7df880db3db11aa","tarball":"https://registry.npmjs.org/to-regex-range/-/to-regex-range-0.1.0.tgz"},"directories":{}},"0.1.1":{"name":"to-regex-range","description":"Returns a regex-compatible range from two numbers, min and max. Useful for creating regular expressions to validate numbers, ranges, years, etc. Returns a string, allowing the returned value to be used in regular expressions generated by other libraries.","version":"0.1.1","homepage":"https://github.com/jonschlinkert/to-regex-range","author":{"name":"Jon Schlinkert","url":"https://github.com/jonschlinkert"},"repository":{"type":"git","url":"git+https://github.com/jonschlinkert/to-regex-range.git"},"bugs":{"url":"https://github.com/jonschlinkert/to-regex-range/issues"},"license":"MIT","files":["index.js"],"main":"index.js","engines":{"node":">=0.10.0"},"scripts":{"test":"mocha"},"dependencies":{"is-number":"^2.0.2","repeat-string":"^1.5.2"},"devDependencies":{"mocha":"*","should":"*"},"keywords":["alpha","alphabetical","bash","brace","expand","expansion","glob","match","matches","matching","number","numerical","range","ranges","sh"],"verb":{"related":{"list":["fill-range","expand-range","micromatch","repeat-element","repeat-string"]}},"gitHead":"353d4020a22a91ac079615d46909adfaa2d058f1","_id":"to-regex-range@0.1.1","_shasum":"c899f37ca02d1aa33611835000c45b5e46e5cfb0","_from":".","_npmVersion":"2.10.1","_nodeVersion":"0.12.4","_npmUser":{"name":"jonschlinkert","email":"github@sellside.com"},"maintainers":[{"name":"jonschlinkert","email":"github@sellside.com"}],"dist":{"shasum":"c899f37ca02d1aa33611835000c45b5e46e5cfb0","tarball":"https://registry.npmjs.org/to-regex-range/-/to-regex-range-0.1.1.tgz"},"directories":{}},"0.1.2":{"name":"to-regex-range","description":"Returns a regex-compatible range from two numbers, min and max. Useful for creating regular expressions to validate numbers, ranges, years, etc. Returns a string, allowing the returned value to be used in regular expressions generated by other libraries.","version":"0.1.2","homepage":"https://github.com/jonschlinkert/to-regex-range","author":{"name":"Jon Schlinkert","url":"https://github.com/jonschlinkert"},"repository":{"type":"git","url":"git+https://github.com/jonschlinkert/to-regex-range.git"},"bugs":{"url":"https://github.com/jonschlinkert/to-regex-range/issues"},"license":"MIT","files":["index.js"],"main":"index.js","engines":{"node":">=0.10.0"},"scripts":{"test":"mocha"},"dependencies":{"is-number":"^2.1.0","repeat-string":"^1.5.4"},"devDependencies":{"gulp-format-md":"^0.1.9","mocha":"^2.4.5","should":"^8.3.1"},"keywords":["alpha","alphabetical","bash","brace","expand","expansion","glob","match","matches","matching","number","numerical","range","ranges","sh"],"verb":{"related":{"list":["expand-range","fill-range","micromatch","repeat-element","repeat-string"]},"toc":false,"layout":"default","tasks":["readme"],"plugins":["gulp-format-md"],"lint":{"reflinks":true},"reflinks":["verb"]},"gitHead":"353d4020a22a91ac079615d46909adfaa2d058f1","_id":"to-regex-range@0.1.2","_shasum":"258539fa4984ba79847b1fb4294a53487e8d15e9","_from":".","_npmVersion":"3.6.0","_nodeVersion":"5.5.0","_npmUser":{"name":"jonschlinkert","email":"github@sellside.com"},"maintainers":[{"name":"jonschlinkert","email":"github@sellside.com"},{"name":"doowb","email":"brian.woodward@gmail.com"}],"dist":{"shasum":"258539fa4984ba79847b1fb4294a53487e8d15e9","tarball":"https://registry.npmjs.org/to-regex-range/-/to-regex-range-0.1.2.tgz"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/to-regex-range-0.1.2.tgz_1461741100056_0.09246146096847951"},"directories":{}},"0.1.3":{"name":"to-regex-range","description":"Returns a regex-compatible range from two numbers, min and max, with 855,412 generated unit tests to validate it's accuracy! Useful for creating regular expressions to validate numbers, ranges, years, etc. Returns a string, allowing the returned value to ","version":"0.1.3","homepage":"https://github.com/jonschlinkert/to-regex-range","author":{"name":"Jon Schlinkert","url":"https://github.com/jonschlinkert"},"repository":{"type":"git","url":"git+https://github.com/jonschlinkert/to-regex-range.git"},"bugs":{"url":"https://github.com/jonschlinkert/to-regex-range/issues"},"license":"MIT","files":["index.js"],"main":"index.js","engines":{"node":">=0.10.0"},"scripts":{"test":"mocha"},"dependencies":{"is-number":"^2.1.0","repeat-string":"^1.5.4"},"devDependencies":{"gulp-format-md":"^0.1.9","mocha":"^2.4.5","should":"^8.3.1"},"keywords":["alpha","alphabetical","bash","brace","expand","expansion","glob","match","matches","matching","number","numerical","range","ranges","regex","sh"],"verb":{"related":{"list":["expand-range","fill-range","micromatch","repeat-element","repeat-string"]},"toc":false,"layout":"default","tasks":["readme"],"plugins":["gulp-format-md"],"lint":{"reflinks":true},"reflinks":["verb"]},"gitHead":"7dc1bb25f8bf0b94cec120de917a8d67c9c6213d","_id":"to-regex-range@0.1.3","_shasum":"2dfef8fc4c46586a98739774c2e66e1fd5a24a58","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"jonschlinkert","email":"github@sellside.com"},"maintainers":[{"name":"jonschlinkert","email":"github@sellside.com"},{"name":"doowb","email":"brian.woodward@gmail.com"}],"dist":{"shasum":"2dfef8fc4c46586a98739774c2e66e1fd5a24a58","tarball":"https://registry.npmjs.org/to-regex-range/-/to-regex-range-0.1.3.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/to-regex-range-0.1.3.tgz_1473860813552_0.9383346708491445"},"directories":{}},"0.2.0":{"name":"to-regex-range","description":"Returns a regex-compatible range from two numbers, min and max, with 855,412 generated unit tests to validate it's accuracy! Useful for creating regular expressions to validate numbers, ranges, years, etc. Returns a string, allowing the returned value to ","version":"0.2.0","homepage":"https://github.com/jonschlinkert/to-regex-range","author":{"name":"Jon Schlinkert","url":"https://github.com/jonschlinkert"},"repository":{"type":"git","url":"git+https://github.com/jonschlinkert/to-regex-range.git"},"bugs":{"url":"https://github.com/jonschlinkert/to-regex-range/issues"},"license":"MIT","files":["index.js"],"main":"index.js","engines":{"node":">=0.10.0"},"scripts":{"test":"mocha"},"dependencies":{"is-number":"^2.1.0","repeat-string":"^1.5.4"},"devDependencies":{"gulp-format-md":"^0.1.9","mocha":"^2.4.5"},"keywords":["alpha","alphabetical","bash","brace","expand","expansion","glob","match","matches","matching","number","numerical","range","ranges","regex","sh"],"verb":{"related":{"list":["expand-range","fill-range","micromatch","repeat-element","repeat-string"]},"toc":false,"layout":"default","tasks":["readme"],"plugins":["gulp-format-md"],"lint":{"reflinks":true},"reflinks":["verb"]},"gitHead":"7fb685679705470ec3701dbff48ca05a5fd461f9","_id":"to-regex-range@0.2.0","_shasum":"12b35ace6ec656ea32d9303c2abeb07efa61c1c2","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"jonschlinkert","email":"github@sellside.com"},"maintainers":[{"name":"jonschlinkert","email":"github@sellside.com"},{"name":"doowb","email":"brian.woodward@gmail.com"}],"dist":{"shasum":"12b35ace6ec656ea32d9303c2abeb07efa61c1c2","tarball":"https://registry.npmjs.org/to-regex-range/-/to-regex-range-0.2.0.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/to-regex-range-0.2.0.tgz_1473873994194_0.8441547460388392"},"directories":{}},"1.0.0":{"name":"to-regex-range","description":"Returns a regex-compatible range from two numbers, min and max. Validated against more than 1.1 million generated unit tests that run in less than 400ms! Useful for creating regular expressions to validate numbers, ranges, years, etc.","version":"1.0.0","homepage":"https://github.com/jonschlinkert/to-regex-range","author":{"name":"Jon Schlinkert","url":"https://github.com/jonschlinkert"},"repository":{"type":"git","url":"git+https://github.com/jonschlinkert/to-regex-range.git"},"bugs":{"url":"https://github.com/jonschlinkert/to-regex-range/issues"},"license":"MIT","files":["index.js"],"main":"index.js","engines":{"node":">=0.10.0"},"scripts":{"test":"mocha"},"dependencies":{"is-number":"^3.0.0","repeat-string":"^1.5.4"},"devDependencies":{"gulp-format-md":"^0.1.11","mocha":"^3.1.2"},"keywords":["alpha","alphabetical","bash","brace","date","expand","expansion","glob","match","matches","matching","number","numerical","range","ranges","regex","sequence","sh","to","year"],"verb":{"related":{"list":["expand-range","fill-range","micromatch","repeat-element","repeat-string"]},"toc":false,"layout":"default","tasks":["readme"],"plugins":["gulp-format-md"],"lint":{"reflinks":true},"reflinks":["verb"]},"gitHead":"77612b7a51ce6ce86e2931f91c08376ab886844b","_id":"to-regex-range@1.0.0","_shasum":"0f411a456c89a592465f54ed79d3c376ad285906","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.7.0","_npmUser":{"name":"jonschlinkert","email":"github@sellside.com"},"maintainers":[{"name":"jonschlinkert","email":"github@sellside.com"},{"name":"doowb","email":"brian.woodward@gmail.com"}],"dist":{"shasum":"0f411a456c89a592465f54ed79d3c376ad285906","tarball":"https://registry.npmjs.org/to-regex-range/-/to-regex-range-1.0.0.tgz"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/to-regex-range-1.0.0.tgz_1476886365049_0.586534371599555"},"directories":{}},"1.0.1":{"name":"to-regex-range","description":"Returns a regex-compatible range from two numbers, min and max. Validated against more than 1.1 million generated unit tests that run in less than 400ms! Useful for creating regular expressions to validate numbers, ranges, years, etc.","version":"1.0.1","homepage":"https://github.com/jonschlinkert/to-regex-range","author":{"name":"Jon Schlinkert","url":"https://github.com/jonschlinkert"},"repository":{"type":"git","url":"git+https://github.com/jonschlinkert/to-regex-range.git"},"bugs":{"url":"https://github.com/jonschlinkert/to-regex-range/issues"},"license":"MIT","files":["index.js"],"main":"index.js","engines":{"node":">=0.10.0"},"scripts":{"test":"mocha"},"dependencies":{"is-number":"^3.0.0","repeat-string":"^1.5.4"},"devDependencies":{"gulp-format-md":"^0.1.11","mocha":"^3.1.2"},"keywords":["alpha","alphabetical","bash","brace","date","expand","expansion","glob","match","matches","matching","number","numerical","range","ranges","regex","sequence","sh","to","year"],"verb":{"related":{"list":["expand-range","fill-range","micromatch","repeat-element","repeat-string"]},"toc":false,"layout":"default","tasks":["readme"],"plugins":["gulp-format-md"],"lint":{"reflinks":true},"reflinks":["verb"]},"gitHead":"23c0a9584ce9b269b53bcd33efa6e1a2908d8cfe","_id":"to-regex-range@1.0.1","_shasum":"415a8c95a7bb3704aadff3f1efff0089590dd43a","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.7.0","_npmUser":{"name":"jonschlinkert","email":"github@sellside.com"},"maintainers":[{"name":"jonschlinkert","email":"github@sellside.com"},{"name":"doowb","email":"brian.woodward@gmail.com"}],"dist":{"shasum":"415a8c95a7bb3704aadff3f1efff0089590dd43a","tarball":"https://registry.npmjs.org/to-regex-range/-/to-regex-range-1.0.1.tgz"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/to-regex-range-1.0.1.tgz_1476886634926_0.06069781770929694"},"directories":{}},"1.0.2":{"name":"to-regex-range","description":"Returns a regex-compatible range from two numbers, min and max. Validated against more than 1.1 million generated unit tests that run in less than 400ms! Useful for creating regular expressions to validate numbers, ranges, years, etc.","version":"1.0.2","homepage":"https://github.com/jonschlinkert/to-regex-range","author":{"name":"Jon Schlinkert","url":"https://github.com/jonschlinkert"},"repository":{"type":"git","url":"git+https://github.com/jonschlinkert/to-regex-range.git"},"bugs":{"url":"https://github.com/jonschlinkert/to-regex-range/issues"},"license":"MIT","files":["index.js"],"main":"index.js","engines":{"node":">=0.10.0"},"scripts":{"test":"mocha"},"dependencies":{"is-number":"^3.0.0","repeat-string":"^1.5.4"},"devDependencies":{"gulp-format-md":"^0.1.11","mocha":"^3.1.2"},"keywords":["alpha","alphabetical","bash","brace","date","expand","expansion","glob","match","matches","matching","number","numerical","range","ranges","regex","sequence","sh","to","year"],"verb":{"related":{"list":["expand-range","fill-range","micromatch","repeat-element","repeat-string"]},"toc":false,"layout":"default","tasks":["readme"],"plugins":["gulp-format-md"],"lint":{"reflinks":true},"reflinks":["verb"]},"gitHead":"70f53c926ac14ba42c317a9084d048e1d342b69f","_id":"to-regex-range@1.0.2","_shasum":"48d5a984e7f701ba99f1e67b3bde1d1b11ecf74c","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.7.0","_npmUser":{"name":"jonschlinkert","email":"github@sellside.com"},"maintainers":[{"name":"jonschlinkert","email":"github@sellside.com"},{"name":"doowb","email":"brian.woodward@gmail.com"}],"dist":{"shasum":"48d5a984e7f701ba99f1e67b3bde1d1b11ecf74c","tarball":"https://registry.npmjs.org/to-regex-range/-/to-regex-range-1.0.2.tgz"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/to-regex-range-1.0.2.tgz_1476886731697_0.7599127704743296"},"directories":{}},"2.0.0":{"name":"to-regex-range","description":"Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.87 million test assertions.","version":"2.0.0","homepage":"https://github.com/jonschlinkert/to-regex-range","author":{"name":"Jon Schlinkert","url":"https://github.com/jonschlinkert"},"repository":{"type":"git","url":"git+https://github.com/jonschlinkert/to-regex-range.git"},"bugs":{"url":"https://github.com/jonschlinkert/to-regex-range/issues"},"license":"MIT","files":["index.js"],"main":"index.js","engines":{"node":">=0.10.0"},"scripts":{"test":"mocha"},"dependencies":{"is-number":"^3.0.0","repeat-string":"^1.6.1"},"devDependencies":{"fill-range":"^3.1.1","gulp-format-md":"^0.1.12","mocha":"^3.2.0","text-table":"^0.2.0","time-diff":"^0.3.1"},"keywords":["alpha","alphabetical","bash","brace","date","expand","expansion","glob","match","matches","matching","number","numerical","range","ranges","regex","sequence","sh","to","year"],"verb":{"related":{"list":["expand-range","fill-range","micromatch","repeat-element","repeat-string"]},"toc":false,"layout":"default","tasks":["readme"],"plugins":["gulp-format-md"],"lint":{"reflinks":true},"helpers":["./examples.js"],"reflinks":["0-5","0-9","1-5","1-9","expand-range","fill-range","micromatch","npm","range-regex","repeat-element","repeat-string","verb","verb-generate-readme","yarn"]},"gitHead":"7dd74b20031f934143b627d2ef2826cdcb1aa4bc","_id":"to-regex-range@2.0.0","_shasum":"53bea64df461ac8f024f2b07d8e9ff27daec5985","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.7.3","_npmUser":{"name":"jonschlinkert","email":"github@sellside.com"},"maintainers":[{"name":"jonschlinkert","email":"github@sellside.com"},{"name":"doowb","email":"brian.woodward@gmail.com"}],"dist":{"shasum":"53bea64df461ac8f024f2b07d8e9ff27daec5985","tarball":"https://registry.npmjs.org/to-regex-range/-/to-regex-range-2.0.0.tgz"},"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/to-regex-range-2.0.0.tgz_1492845290425_0.21176357800140977"},"directories":{}},"2.1.0":{"name":"to-regex-range","description":"Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.87 million test assertions.","version":"2.1.0","homepage":"https://github.com/jonschlinkert/to-regex-range","author":{"name":"Jon Schlinkert","url":"https://github.com/jonschlinkert"},"repository":{"type":"git","url":"git+https://github.com/jonschlinkert/to-regex-range.git"},"bugs":{"url":"https://github.com/jonschlinkert/to-regex-range/issues"},"license":"MIT","files":["index.js"],"main":"index.js","engines":{"node":">=0.10.0"},"scripts":{"test":"mocha"},"dependencies":{"is-number":"^3.0.0","repeat-string":"^1.6.1"},"devDependencies":{"fill-range":"^3.1.1","gulp-format-md":"^0.1.12","mocha":"^3.2.0","text-table":"^0.2.0","time-diff":"^0.3.1"},"keywords":["alpha","alphabetical","bash","brace","date","expand","expansion","glob","match","matches","matching","number","numerical","range","ranges","regex","sequence","sh","to","year"],"verb":{"related":{"list":["expand-range","fill-range","micromatch","repeat-element","repeat-string"]},"toc":false,"layout":"default","tasks":["readme"],"plugins":["gulp-format-md"],"lint":{"reflinks":true},"helpers":["./examples.js"]},"gitHead":"c122d720c8f89889261c15ffe428570b6b5bb9ee","_id":"to-regex-range@2.1.0","_shasum":"ab2989a43c53bc367dd604adf22e330984840d74","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.7.3","_npmUser":{"name":"jonschlinkert","email":"github@sellside.com"},"maintainers":[{"name":"jonschlinkert","email":"github@sellside.com"},{"name":"doowb","email":"brian.woodward@gmail.com"}],"dist":{"shasum":"ab2989a43c53bc367dd604adf22e330984840d74","tarball":"https://registry.npmjs.org/to-regex-range/-/to-regex-range-2.1.0.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/to-regex-range-2.1.0.tgz_1492912458461_0.6350747356191278"},"directories":{}},"2.1.1":{"name":"to-regex-range","description":"Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.78 million test assertions.","version":"2.1.1","homepage":"https://github.com/micromatch/to-regex-range","author":{"name":"Jon Schlinkert","url":"https://github.com/jonschlinkert"},"repository":{"type":"git","url":"git+https://github.com/micromatch/to-regex-range.git"},"bugs":{"url":"https://github.com/micromatch/to-regex-range/issues"},"license":"MIT","files":["index.js"],"main":"index.js","engines":{"node":">=0.10.0"},"scripts":{"test":"mocha"},"dependencies":{"is-number":"^3.0.0","repeat-string":"^1.6.1"},"devDependencies":{"fill-range":"^3.1.1","gulp-format-md":"^0.1.12","mocha":"^3.2.0","text-table":"^0.2.0","time-diff":"^0.3.1"},"keywords":["alpha","alphabetical","bash","brace","date","expand","expansion","glob","match","matches","matching","number","numerical","range","ranges","regex","sequence","sh","to","year"],"verb":{"related":{"list":["expand-range","fill-range","micromatch","repeat-element","repeat-string"]},"toc":false,"layout":"default","tasks":["readme"],"plugins":["gulp-format-md"],"lint":{"reflinks":true},"helpers":["./examples.js"],"reflinks":["0-5","0-9","1-5","1-9"]},"gitHead":"de34e5079dbf33f8ac992d87914fa5e3507fa07d","_id":"to-regex-range@2.1.1","_shasum":"7c80c17b9dfebe599e27367e0d4dd5590141db38","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.7.3","_npmUser":{"name":"jonschlinkert","email":"github@sellside.com"},"maintainers":[{"name":"jonschlinkert","email":"github@sellside.com"},{"name":"doowb","email":"brian.woodward@gmail.com"}],"dist":{"shasum":"7c80c17b9dfebe599e27367e0d4dd5590141db38","tarball":"https://registry.npmjs.org/to-regex-range/-/to-regex-range-2.1.1.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/to-regex-range-2.1.1.tgz_1493300068448_0.391837228089571"},"directories":{}}},"readme":"# to-regex-range [![NPM version](https://img.shields.io/npm/v/to-regex-range.svg?style=flat)](https://www.npmjs.com/package/to-regex-range) [![NPM monthly downloads](https://img.shields.io/npm/dm/to-regex-range.svg?style=flat)](https://npmjs.org/package/to-regex-range)  [![NPM total downloads](https://img.shields.io/npm/dt/to-regex-range.svg?style=flat)](https://npmjs.org/package/to-regex-range) [![Linux Build Status](https://img.shields.io/travis/micromatch/to-regex-range.svg?style=flat&label=Travis)](https://travis-ci.org/micromatch/to-regex-range)\n\n> Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.78 million test assertions.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save to-regex-range\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add to-regex-range\n```\n\n<details>\n<summary><strong>What does this do?</strong></summary>\n\n<br>\n\nThis libary generates the `source` string to be passed to `new RegExp()` for matching a range of numbers.\n\n**Example**\n\n```js\nvar toRegexRange = require('to-regex-range');\nvar regex = new RegExp(toRegexRange('15', '95'));\n```\n\nA string is returned so that you can do whatever you need with it before passing it to `new RegExp()` (like adding `^` or `$` boundaries, defining flags, or combining it another string).\n\n<br>\n\n</details>\n\n<details>\n<summary><strong>Why use this library?</strong></summary>\n\n<br>\n\n### Convenience\n\nCreating regular expressions for matching numbers gets deceptively complicated pretty fast.\n\nFor example, let's say you need a validation regex for matching part of a user-id, postal code, social security number, tax id, etc:\n\n* regex for matching `1` => `/1/` (easy enough)\n* regex for matching `1` through `5` => `/[1-5]/` (not bad...)\n* regex for matching `1` or `5` => `/(1|5)/` (still easy...)\n* regex for matching `1` through `50` => `/([1-9]|[1-4][0-9]|50)/` (uh-oh...)\n* regex for matching `1` through `55` => `/([1-9]|[1-4][0-9]|5[0-5])/` (no prob, I can do this...)\n* regex for matching `1` through `555` => `/([1-9]|[1-9][0-9]|[1-4][0-9]{2}|5[0-4][0-9]|55[0-5])/` (maybe not...)\n* regex for matching `0001` through `5555` => `/(0{3}[1-9]|0{2}[1-9][0-9]|0[1-9][0-9]{2}|[1-4][0-9]{3}|5[0-4][0-9]{2}|55[0-4][0-9]|555[0-5])/` (okay, I get the point!)\n\nThe numbers are contrived, but they're also really basic. In the real world you might need to generate a regex on-the-fly for validation.\n\n**Learn more**\n\nIf you're interested in learning more about [character classes](http://www.regular-expressions.info/charclass.html) and other regex features, I personally have always found [regular-expressions.info](http://www.regular-expressions.info/charclass.html) to be pretty useful.\n\n### Heavily tested\n\nAs of April 27, 2017, this library runs [2,783,483 test assertions](./test/test.js) against generated regex-ranges to provide brute-force verification that results are indeed correct.\n\nTests run in ~870ms on my MacBook Pro, 2.5 GHz Intel Core i7.\n\n### Highly optimized\n\nGenerated regular expressions are highly optimized:\n\n* duplicate sequences and character classes are reduced using quantifiers\n* smart enough to use `?` conditionals when number(s) or range(s) can be positive or negative\n* uses fragment caching to avoid processing the same exact string more than once\n\n<br>\n\n</details>\n\n## Usage\n\nAdd this library to your javascript application with the following line of code\n\n```js\nvar toRegexRange = require('to-regex-range');\n```\n\nThe main export is a function that takes two integers: the `min` value and `max` value (formatted as strings or numbers).\n\n```js\nvar source = toRegexRange('15', '95');\n//=> 1[5-9]|[2-8][0-9]|9[0-5]\n\nvar re = new RegExp('^' + source + '$');\nconsole.log(re.test('14')); //=> false\nconsole.log(re.test('50')); //=> true\nconsole.log(re.test('94')); //=> true\nconsole.log(re.test('96')); //=> false\n```\n\n## Options\n\n### options.capture\n\n**Type**: `boolean`\n\n**Deafault**: `undefined`\n\nWrap the returned value in parentheses when there is more than one regex condition. Useful when you're dynamically generating ranges.\n\n```js\nconsole.log(toRegexRange('-10', '10'));\n//=> -[1-9]|-?10|[0-9]\n\nconsole.log(toRegexRange('-10', '10', {capture: true}));\n//=> (-[1-9]|-?10|[0-9])\n```\n\n### options.shorthand\n\n**Type**: `boolean`\n\n**Deafault**: `undefined`\n\nUse the regex shorthand for `[0-9]`:\n\n```js\nconsole.log(toRegexRange('0', '999999'));\n//=> [0-9]|[1-9][0-9]{1,5}\n\nconsole.log(toRegexRange('0', '999999', {shorthand: true}));\n//=> \\d|[1-9]\\d{1,5}\n```\n\n### options.relaxZeros\n\n**Type**: `boolean`\n\n**Default**: `true`\n\nThis option only applies to **negative zero-padded ranges**. By default, when a negative zero-padded range is defined, the number of leading zeros is relaxed using `-0*`.\n\n```js\nconsole.log(toRegexRange('-001', '100'));\n//=> -0*1|0{2}[0-9]|0[1-9][0-9]|100\n\nconsole.log(toRegexRange('-001', '100', {relaxZeros: false}));\n//=> -0{2}1|0{2}[0-9]|0[1-9][0-9]|100\n```\n\n<details>\n<summary><strong>Why are zeros relaxed for negative zero-padded ranges by default?</strong></summary>\n\nConsider the following.\n\n```js\nvar regex = toRegexRange('-001', '100');\n```\n\n_Note that `-001` and `100` are both three digits long_.\n\nIn most zero-padding implementations, only a single leading zero is enough to indicate that zero-padding should be applied. Thus, the leading zeros would be \"corrected\" on the negative range in the example to `-01`, instead of `-001`, to make total length of each string no greater than the length of the largest number in the range (in other words, `-001` is 4 digits, but `100` is only three digits).\n\nIf zeros were not relaxed by default, you might expect the resulting regex of the above pattern to match `-001` - given that it's defined that way in the arguments - _but it wouldn't_. It would, however, match `-01`. This gets even more ambiguous with large ranges, like `-01` to `1000000`.\n\nThus, we relax zeros by default to provide a more predictable experience for users.\n\n</details>\n\n## Examples\n\n| **Range** | **Result** | **Compile time** | \n| --- | --- | --- |\n| `toRegexRange('5, 5')` | `5` | _33μs_ |\n| `toRegexRange('5, 6')` | `5\\|6` | _53μs_ |\n| `toRegexRange('29, 51')` | `29\\|[34][0-9]\\|5[01]` | _699μs_ |\n| `toRegexRange('31, 877')` | `3[1-9]\\|[4-9][0-9]\\|[1-7][0-9]{2}\\|8[0-6][0-9]\\|87[0-7]` | _711μs_ |\n| `toRegexRange('111, 555')` | `11[1-9]\\|1[2-9][0-9]\\|[2-4][0-9]{2}\\|5[0-4][0-9]\\|55[0-5]` | _62μs_ |\n| `toRegexRange('-10, 10')` | `-[1-9]\\|-?10\\|[0-9]` | _74μs_ |\n| `toRegexRange('-100, -10')` | `-1[0-9]\\|-[2-9][0-9]\\|-100` | _49μs_ |\n| `toRegexRange('-100, 100')` | `-[1-9]\\|-?[1-9][0-9]\\|-?100\\|[0-9]` | _45μs_ |\n| `toRegexRange('001, 100')` | `0{2}[1-9]\\|0[1-9][0-9]\\|100` | _158μs_ |\n| `toRegexRange('0010, 1000')` | `0{2}1[0-9]\\|0{2}[2-9][0-9]\\|0[1-9][0-9]{2}\\|1000` | _61μs_ |\n| `toRegexRange('1, 2')` | `1\\|2` | _10μs_ |\n| `toRegexRange('1, 5')` | `[1-5]` | _24μs_ |\n| `toRegexRange('1, 10')` | `[1-9]\\|10` | _23μs_ |\n| `toRegexRange('1, 100')` | `[1-9]\\|[1-9][0-9]\\|100` | _30μs_ |\n| `toRegexRange('1, 1000')` | `[1-9]\\|[1-9][0-9]{1,2}\\|1000` | _52μs_ |\n| `toRegexRange('1, 10000')` | `[1-9]\\|[1-9][0-9]{1,3}\\|10000` | _47μs_ |\n| `toRegexRange('1, 100000')` | `[1-9]\\|[1-9][0-9]{1,4}\\|100000` | _44μs_ |\n| `toRegexRange('1, 1000000')` | `[1-9]\\|[1-9][0-9]{1,5}\\|1000000` | _49μs_ |\n| `toRegexRange('1, 10000000')` | `[1-9]\\|[1-9][0-9]{1,6}\\|10000000` | _63μs_ |\n\n## Heads up!\n\n**Order of arguments**\n\nWhen the `min` is larger than the `max`, values will be flipped to create a valid range:\n\n```js\ntoRegexRange('51', '29');\n```\n\nIs effectively flipped to:\n\n```js\ntoRegexRange('29', '51');\n//=> 29|[3-4][0-9]|5[0-1]\n```\n\n**Steps / increments**\n\nThis library does not support steps (increments). A pr to add support would be welcome.\n\n## History\n\n### v2.0.0 - 2017-04-21\n\n**New features**\n\nAdds support for zero-padding!\n\n### v1.0.0\n\n**Optimizations**\n\nRepeating ranges are now grouped using quantifiers. rocessing time is roughly the same, but the generated regex is much smaller, which should result in faster matching.\n\n## Attribution\n\nInspired by the python library [range-regex](https://github.com/dimka665/range-regex).\n\n## About\n\n### Related projects\n\n* [expand-range](https://www.npmjs.com/package/expand-range): Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See… [more](https://github.com/jonschlinkert/expand-range) | [homepage](https://github.com/jonschlinkert/expand-range \"Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See the benchmarks. Used by micromatch.\")\n* [fill-range](https://www.npmjs.com/package/fill-range): Fill in a range of numbers or letters, optionally passing an increment or `step` to… [more](https://github.com/jonschlinkert/fill-range) | [homepage](https://github.com/jonschlinkert/fill-range \"Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/jonschlinkert/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n* [repeat-element](https://www.npmjs.com/package/repeat-element): Create an array by repeating the given value n times. | [homepage](https://github.com/jonschlinkert/repeat-element \"Create an array by repeating the given value n times.\")\n* [repeat-string](https://www.npmjs.com/package/repeat-string): Repeat the given string n times. Fastest implementation for repeating a string. | [homepage](https://github.com/jonschlinkert/repeat-string \"Repeat the given string n times. Fastest implementation for repeating a string.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on April 27, 2017._","maintainers":[{"email":"brian.woodward@gmail.com","name":"doowb"},{"email":"github@sellside.com","name":"jonschlinkert"}],"time":{"modified":"2017-07-02T17:43:01.927Z","created":"2015-08-07T10:48:06.053Z","0.1.0":"2015-08-07T10:48:06.053Z","0.1.1":"2015-08-07T13:00:07.697Z","0.1.2":"2016-04-27T07:11:41.093Z","0.1.3":"2016-09-14T13:46:55.235Z","0.2.0":"2016-09-14T17:26:36.135Z","1.0.0":"2016-10-19T14:12:45.685Z","1.0.1":"2016-10-19T14:17:15.634Z","1.0.2":"2016-10-19T14:18:52.341Z","2.0.0":"2017-04-22T07:14:51.512Z","2.1.0":"2017-04-23T01:54:20.425Z","2.1.1":"2017-04-27T13:34:30.544Z"},"homepage":"https://github.com/micromatch/to-regex-range","keywords":["alpha","alphabetical","bash","brace","date","expand","expansion","glob","match","matches","matching","number","numerical","range","ranges","regex","sequence","sh","to","year"],"repository":{"type":"git","url":"git+https://github.com/micromatch/to-regex-range.git"},"author":{"name":"Jon Schlinkert","url":"https://github.com/jonschlinkert"},"bugs":{"url":"https://github.com/micromatch/to-regex-range/issues"},"license":"MIT","readmeFilename":"README.md","users":{"jonschlinkert":true},"_attachments":{},"_etag":"W/\"595930a5-8312\"","_lastModified":"Sun, 02 Jul 2017 17:43:01 GMT"}